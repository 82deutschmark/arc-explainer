/**
 * Explanation Repository Interface
 * 
 * Defines the contract for explanation data access operations.
 * Separates explanation-related database operations from other concerns.
 * 
 * @author Claude
 * @date 2025-08-27
 */

export interface ExplanationData {
  id?: number; // Optional - auto-generated by database, but needed for debate mode context
  puzzleId: string;
  patternDescription: string;
  solvingStrategy: string;
  hints: string[];
  confidence: number;
  alienMeaningConfidence?: number | null;
  alienMeaning?: string | null;
  modelName: string;
  reasoningLog?: string | null;
  hasReasoningLog?: boolean;
  providerResponseId?: string | null;
  apiProcessingTimeMs?: number | null;
  saturnImages?: any | null;
  saturnLog?: any | null;
  saturnEvents?: any | null;
  saturnSuccess?: boolean | null;
  predictedOutputGrid?: any | null;
  isPredictionCorrect?: boolean | null;
  trustworthinessScore?: number | null;
  providerRawResponse?: any | null;
  reasoningItems?: any | null;
  temperature?: number | null;
  reasoningEffort?: string | null;
  reasoningVerbosity?: string | null;
  reasoningSummaryType?: string | null;
  inputTokens?: number | null;
  outputTokens?: number | null;
  reasoningTokens?: number | null;
  totalTokens?: number | null;
  estimatedCost?: number | null;
  multiplePredictedOutputs?: any | null;
  multiTestResults?: any | null;
  multiTestAllCorrect?: boolean | null;
  multiTestAverageAccuracy?: number | null;
  hasMultiplePredictions?: boolean | null;
  multiTestPredictionGrids?: any | null;
  // NEW: Prompt tracking fields for full traceability
  systemPromptUsed?: string | null;
  userPromptUsed?: string | null;
  promptTemplateId?: string | null;
  customPromptText?: string | null;
  rebuttingExplanationId?: number | null;
  // NEW: Grover iterative solver fields
  groverIterations?: any | null;
  groverBestProgram?: string | null;
  iterationCount?: number | null;
  createdAt?: string; // Also optional - auto-generated but useful for debate context
  // Note: id and created_at are auto-generated by database
}

export interface ExplanationResponse {
  id: number;
  puzzleId: string;
  patternDescription: string;
  solvingStrategy: string;
  hints: string[];
  confidence: number;
  alienMeaningConfidence: number | null;
  alienMeaning: string | null;
  modelName: string;
  reasoningLog: string | null;
  hasReasoningLog: boolean;
  providerResponseId: string | null;
  apiProcessingTimeMs: number | null;
  saturnImages: any | null;
  saturnLog: any | null;
  saturnEvents: any | null;
  saturnSuccess: boolean | null;
  predictedOutputGrid: number[][] | null;
  isPredictionCorrect: boolean | null;
  trustworthinessScore: number | null;
  providerRawResponse: any | null;
  reasoningItems: any | null;
  temperature: number | null;
  reasoningEffort: string | null;
  reasoningVerbosity: string | null;
  reasoningSummaryType: string | null;
  inputTokens: number | null;
  outputTokens: number | null;
  reasoningTokens: number | null;
  totalTokens: number | null;
  estimatedCost: number | null;
  multiplePredictedOutputs: any | null;
  multiTestResults: any | null;
  multiTestAllCorrect: boolean | null;
  multiTestAverageAccuracy: number | null;
  hasMultiplePredictions: boolean | null;
  multiTestPredictionGrids: any | null;
  // NEW: Prompt tracking fields for full traceability
  systemPromptUsed: string | null;
  userPromptUsed: string | null;
  promptTemplateId: string | null;
  customPromptText: string | null;
  rebuttingExplanationId: number | null;
  // NEW: Grover iterative solver fields
  groverIterations: any | null;
  groverBestProgram: string | null;
  iterationCount: number | null;
  createdAt: string;
  helpfulVotes?: number;
  notHelpfulVotes?: number;
}

export interface ExplanationSummaryPage {
  items: ExplanationResponse[];
  total: number;
  filteredTotal: number;
  counts: {
    all: number;
    correct: number;
    incorrect: number;
  };
}

export interface BulkExplanationStatus {
  [puzzleId: string]: {
    hasExplanation: boolean;
    explanationId: number | null;
    feedbackCount: number;
    apiProcessingTimeMs: number | null;
    modelName: string | null;
    createdAt: Date | null;
    confidence: number | null;
    estimatedCost: number | null;
    alienMeaningConfidence: number | null;
    alienMeaning: string | null;
    reasoningLog: string | null;
    hasReasoningLog: boolean | null;
    providerResponseId: string | null;
    saturnImages: any | null;
    saturnLog: any | null;
    saturnEvents: any | null;
    saturnSuccess: boolean | null;
    predictedOutputGrid: any | null;
    isPredictionCorrect: boolean | null;
    trustworthinessScore: number | null;
    providerRawResponse: any | null;
    reasoningItems: any | null;
    temperature: number | null;
    reasoningEffort: string | null;
    reasoningVerbosity: string | null;
    reasoningSummaryType: string | null;
    inputTokens: number | null;
    outputTokens: number | null;
    reasoningTokens: number | null;
    totalTokens: number | null;
    multiplePredictedOutputs: any | null;
    multiTestResults: any | null;
    multiTestAllCorrect: boolean | null;
    multiTestAverageAccuracy: number | null;
    hasMultiplePredictions: boolean | null;
    multiTestPredictionGrids: any | null;
  };
}

/**
 * Interface for Explanation Repository
 */
export interface IExplanationRepository {
  /**
   * Save a new explanation for a puzzle
   */
  saveExplanation(data: ExplanationData): Promise<ExplanationResponse>;

  /**
   * Get the most recent explanation for a puzzle
   */
  getExplanationForPuzzle(puzzleId: string): Promise<ExplanationResponse | null>;

  /**
   * Get all explanations for a puzzle (multiple models/attempts)
   * @param puzzleId - The puzzle ID to get explanations for
   * @param correctnessFilter - Optional filter: 'all', 'correct', or 'incorrect'
   */
  getExplanationsForPuzzle(puzzleId: string, correctnessFilter?: 'all' | 'correct' | 'incorrect'): Promise<ExplanationResponse[]>;

  /**
   * Get paginated explanation summaries for a puzzle.
   * Returns lightweight rows (no grid JSON) with aggregate counts for filters.
   */
  getExplanationSummariesForPuzzle(
    puzzleId: string,
    options?: {
      correctnessFilter?: 'all' | 'correct' | 'incorrect';
      limit?: number;
      offset?: number;
    }
  ): Promise<ExplanationSummaryPage>;

  /**
   * Get explanation by ID
   */
  getExplanationById(id: number): Promise<ExplanationResponse | null>;

  /**
   * Check if puzzle has any explanations
   */
  hasExplanation(puzzleId: string): Promise<boolean>;

  /**
   * Get bulk explanation status for multiple puzzles
   */
  getBulkExplanationStatus(puzzleIds: string[]): Promise<BulkExplanationStatus>;
}