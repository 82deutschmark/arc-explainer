/**
 * Explanation Repository Interface
 * 
 * Defines the contract for explanation data access operations.
 * Separates explanation-related database operations from other concerns.
 * 
 * @author Claude
 * @date 2025-08-27
 */

export interface ExplanationData {
  puzzle_id: string;
  pattern_description: string;
  solving_strategy: string;
  hints: string[];
  confidence: number;
  alien_meaning_confidence?: number | null;
  alien_meaning?: string | null;
  model_name: string;
  reasoning_log?: string | null;
  has_reasoning_log?: boolean;
  provider_response_id?: string | null;
  api_processing_time_ms?: number | null;
  saturn_images?: any | null;
  saturn_log?: any | null;
  saturn_events?: any | null;
  saturn_success?: boolean | null;
  predicted_output_grid?: any | null;
  is_prediction_correct?: boolean | null;
  prediction_accuracy_score?: number | null;
  provider_raw_response?: any | null;
  reasoning_items?: any | null;
  temperature?: number | null;
  reasoning_effort?: string | null;
  reasoning_verbosity?: string | null;
  reasoning_summary_type?: string | null;
  input_tokens?: number | null;
  output_tokens?: number | null;
  reasoning_tokens?: number | null;
  total_tokens?: number | null;
  estimated_cost?: number | null;
  multiple_predicted_outputs?: any | null;
  multi_test_results?: any | null;
  multi_test_all_correct?: boolean | null;
  multi_test_average_accuracy?: number | null;
  has_multiple_predictions?: boolean | null;
  multi_test_prediction_grids?: any | null;
  // Note: id and created_at are auto-generated by database
}

export interface ExplanationResponse {
  id: number;
  puzzleId: string;
  patternDescription: string;
  solvingStrategy: string;
  hints: string[];
  confidence: number;
  alienMeaningConfidence: number | null;
  alienMeaning: string | null;
  modelName: string;
  reasoningLog: string | null;
  hasReasoningLog: boolean;
  providerResponseId: string | null;
  apiProcessingTimeMs: number | null;
  saturnImages: any | null;
  saturnLog: any | null;
  saturnEvents: any | null;
  saturnSuccess: boolean | null;
  predictedOutputGrid: number[][] | null;
  isPredictionCorrect: boolean | null;
  predictionAccuracyScore: number | null;
  providerRawResponse: any | null;
  reasoningItems: any | null;
  temperature: number | null;
  reasoningEffort: string | null;
  reasoningVerbosity: string | null;
  reasoningSummaryType: string | null;
  inputTokens: number | null;
  outputTokens: number | null;
  reasoningTokens: number | null;
  totalTokens: number | null;
  estimatedCost: number | null;
  multiplePredictedOutputs: any | null;
  multiTestResults: any | null;
  multiTestAllCorrect: boolean | null;
  multiTestAverageAccuracy: number | null;
  hasMultiplePredictions: boolean | null;
  multiTestPredictionGrids: any | null;
  createdAt: string;
  helpfulVotes?: number;
  notHelpfulVotes?: number;
}

export interface BulkExplanationStatus {
  [puzzleId: string]: {
    hasExplanation: boolean;
    explanationId: number | null;
    feedbackCount: number;
    apiProcessingTimeMs: number | null;
    modelName: string | null;
    createdAt: Date | null;
    confidence: number | null;
    estimatedCost: number | null;
  };
}

/**
 * Interface for Explanation Repository
 */
export interface IExplanationRepository {
  /**
   * Save a new explanation for a puzzle
   */
  saveExplanation(data: ExplanationData): Promise<ExplanationResponse>;

  /**
   * Get the most recent explanation for a puzzle
   */
  getExplanationForPuzzle(puzzleId: string): Promise<ExplanationResponse | null>;

  /**
   * Get all explanations for a puzzle (multiple models/attempts)
   */
  getExplanationsForPuzzle(puzzleId: string): Promise<ExplanationResponse[]>;

  /**
   * Get explanation by ID
   */
  getExplanationById(id: number): Promise<ExplanationResponse | null>;

  /**
   * Check if puzzle has any explanations
   */
  hasExplanation(puzzleId: string): Promise<boolean>;

  /**
   * Get bulk explanation status for multiple puzzles
   */
  getBulkExplanationStatus(puzzleIds: string[]): Promise<BulkExplanationStatus>;
}